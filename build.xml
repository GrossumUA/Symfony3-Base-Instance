<?xml version="1.0"?>

<project name="Symfony3 build" basedir=".">

    <property file="app/config/build.properties"/>
    <property file="app/config/default.properties"/>

    <property name="basedir" value="${project.basedir}"/>
    <property name="composer" value="/usr/local/bin/composer"/>

    <property name="reportdir" value="${basedir}/app/reports"/>
    <property name="confdir" value="${basedir}/app/csConfig"/>
    <property name="srcdir" value="${basedir}/src"/>

    <target name="_substitute_parameters_yml">

        <filterset id="_parameters_yml_filter_set">
            <filter token="database_host" value="${db.host}"/>
            <filter token="database_port" value="${db.port}"/>
            <filter token="database_name" value="${db.name}"/>
            <filter token="database_user" value="${db.user}"/>
            <filter token="database_password" value="${db.password}"/>
            <filter token="database_driver" value="${db.driver}"/>

            <filter token="mailer_transport" value="${mailer.transport}"/>
            <filter token="mailer_host" value="${mailer.host}"/>
            <filter token="mailer_user" value="${mailer.user}"/>
            <filter token="mailer_password" value="${mailer.password}"/>

            <filter token="app_locale" value="${app.locale}"/>
            <filter token="app_secret" value="${app.secret}"/>
            <filter token="app_debug_toolbar" value="${app.debug_toolbar}"/>
            <filter token="app_debug_redirects" value="${app.debug_redirects}"/>
            <filter token="app_use_assetic_controller" value="${app.use_assetic_controller}"/>

        </filterset>

        <copy file="${basedir}/app/config/parameters.yml.dist" tofile="${basedir}/app/config/parameters.yml"
              overwrite="true" verbose="true">
            <filterset refid="_parameters_yml_filter_set"/>
        </copy>

    </target>

    <target name="_substitute_parameters_for_test_env_yml">

        <filterset id="_parameters_yml_filter_set">
            <filter token="database_host" value="${db.test.host}"/>
            <filter token="database_port" value="${db.test.port}"/>
            <filter token="database_name" value="${db.test.name}"/>
            <filter token="database_user" value="${db.test.user}"/>
            <filter token="database_password" value="${db.test.password}"/>
            <filter token="database_driver" value="${db.test.driver}"/>

            <filter token="mailer_transport" value="${mailer.transport}"/>
            <filter token="mailer_host" value="${mailer.host}"/>
            <filter token="mailer_user" value="${mailer.user}"/>
            <filter token="mailer_password" value="${mailer.password}"/>

            <filter token="app_locale" value="${app.locale}"/>
            <filter token="app_secret" value="${app.secret}"/>
            <filter token="app_debug_toolbar" value="${app.debug_toolbar}"/>
            <filter token="app_debug_redirects" value="${app.debug_redirects}"/>
            <filter token="app_use_assetic_controller" value="${app.use_assetic_controller}"/>

        </filterset>

        <copy file="${basedir}/app/config/parameters.yml.dist" tofile="${basedir}/app/config/parameters.yml"
              overwrite="true" verbose="true">
            <filterset refid="_parameters_yml_filter_set"/>
        </copy>

    </target>

    <target name="assets" description="Installing assets symlink">
        <exec executable="php">
            <arg value="${basedir}/bin/console" />
            <arg value="assets:install" />
            <arg value="--symlink" />
        </exec>
    </target>

    <target name="assets_prod" description="Installing assets for production">
        <exec executable="php">
            <arg value="${basedir}/bin/console" />
            <arg value="assets:install" />
        </exec>
    </target>

    <target name="create_database" description="Create Db" depends="_create_database, _update_schema" />
    <target name="clear_database" description="Clear DataBase" depends="_drop_schema, _update_schema, load_fixtures" />

    <target name="_create_database" description="Create mysql db">
        <exec executable="mysqladmin">
            <arg value="-h${db.host}" />
            <arg value="-u${db.user}" />
            <arg value="--password=${db.password}" />
            <arg value="create" />
            <arg value="${db.name}" />
        </exec>
    </target>

    <target name="_drop_database" description="Drop mysql db">
        <exec executable="mysqladmin">
            <arg value="-h${db.host}" />
            <arg value="-u${db.user}" />
            <arg value="--password=${db.password}" />
            <arg value="DROP" />
            <arg value="${db.name}" />
            <arg value="-f" />
        </exec>
    </target>

    <target name="_create_test_database" description="Create mysql db">
        <exec executable="mysqladmin">
            <arg value="-h${db.test.host}" />
            <arg value="-u${db.test.user}" />
            <arg value="--password=${db.test.password}" />
            <arg value="create" />
            <arg value="${db.test.name}" />
        </exec>
    </target>

    <target name="_drop_test_database" description="Drop mysql db">
        <exec executable="mysqladmin">
            <arg value="-h${db.test.host}" />
            <arg value="-u${db.test.user}" />
            <arg value="--password=${db.test.password}" />
            <arg value="DROP" />
            <arg value="${db.test.name}" />
            <arg value="-f" />
        </exec>
    </target>

    <target name="_drop_schema" description="Drop Schema">
        <exec executable="php">
            <arg value="${basedir}/bin/console" />
            <arg value="doctrine:schema:drop" />
            <arg value="--force" />
        </exec>
    </target>

    <target name="_update_schema" description="Update schema">
        <exec executable="php">
            <arg value="${basedir}/bin/console" />
            <arg value="doctrine:schema:update" />
            <arg value="--force" />
        </exec>
    </target>

    <target name="load_fixtures" description="Load fixtures">
        <exec executable="php">
            <arg value="${basedir}/bin/console" />
            <arg value="doctrine:fixtures:load" />
        </exec>
    </target>

    <target name="_clear_cache_dev" description="clear cache dev env">
        <exec executable="php">
            <arg value="${basedir}/bin/console" />
            <arg value="cache:clear" />
            <arg value="--env=dev" />
        </exec>
    </target>

    <target name="_clear_cache_prod" description="clear cache prod env">
        <exec executable="php">
            <arg value="${basedir}/bin/console" />
            <arg value="cache:clear" />
            <arg value="--env=prod" />
        </exec>
    </target>

    <target name="_clear_cache_test" description="clear cache test env">
        <exec executable="php">
            <arg value="${basedir}/bin/console" />
            <arg value="cache:clear" />
            <arg value="--env=test" />
        </exec>
    </target>

    <target name="composer_install" description="Run composer install">
        <exec executable="php">
            <env key="COMPOSER_PROCESS_TIMEOUT" value="2000"/>
            <arg value="${composer}"/>
            <arg value="install"/>
            <arg value="-n"/>
            <arg value="-o"/>
        </exec>
    </target>

    <target name="composer_update" description="Run composer update">
        <exec executable="php">
            <arg value="${composer}"/>
            <arg value="update"/>
        </exec>
    </target>

    <target name="clear_cache" depends="_clear_cache_dev, _clear_cache_prod, _clear_cache_test"/>
    <target name="install" depends="_substitute_parameters_yml"/>

    <target name="prod" depends="
        install,
        assets_prod,
        _clear_cache_prod
    "/>

    <target name="build" depends="
        install,
        _drop_database,
        _create_database,
        composer_install,
        _update_schema,
        load_fixtures,
        _clear_cache_prod
    "/>

    <target name="build_test_env" depends="
        _substitute_parameters_for_test_env_yml,
        _drop_test_database,
        _create_test_database,
        composer_install,
        _update_schema,
        load_fixtures
    "/>

    <target name="code-standards" description="Run code standards checks."
            depends="prepare-reportdir,run-code-standards"/>

    <!-- Create reportdir, otherwise phpcs will complain -->
    <target name="prepare-reportdir">
        <mkdir dir="${reportdir}"/>
    </target>

    <target name="run-code-standards" depends="run-phpcs,run-phpcpd,run-phpmd"/>

    <target name="run-phpcs">
        <exec dir="${basedir}" executable="phpcs" failonerror="true">
            <arg line="--encoding=utf-8 --extensions=php --standard=${confdir}/phpcs.xml --report=junit
                      --report-file=${reportdir}/phpcs.xml ${srcdir}"/>
        </exec>
    </target>

    <target name="run-phpmd">
        <exec dir="${basedir}" executable="phpmd" failonerror="true">
            <arg line="${srcdir} xml ${confdir}/phpmd.xml --reportfile ${reportdir}/phpmd.xml"/>
        </exec>
    </target>

    <target name="run-phpcpd">
        <exec dir="${basedir}" executable="phpcpd" failonerror="true">
            <arg line="--min-lines 25 --log-pmd ${reportdir}/phpcpd.xml --verbose"/>
            <arg line="--exclude=MainBundle/Entity"/>
            <arg line="${srcdir}"/>
        </exec>
    </target>
</project>
